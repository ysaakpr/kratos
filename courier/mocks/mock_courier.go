// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/kratos/courier (interfaces: Courier)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	courier "github.com/ory/kratos/courier"
	mail "github.com/ory/mail/v3"
)

// MockCourier is a mock of Courier interface.
type MockCourier struct {
	ctrl     *gomock.Controller
	recorder *MockCourierMockRecorder
}

// MockCourierMockRecorder is the mock recorder for MockCourier.
type MockCourierMockRecorder struct {
	mock *MockCourier
}

// NewMockCourier creates a new mock instance.
func NewMockCourier(ctrl *gomock.Controller) *MockCourier {
	mock := &MockCourier{ctrl: ctrl}
	mock.recorder = &MockCourierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourier) EXPECT() *MockCourierMockRecorder {
	return m.recorder
}

// DispatchMessage mocks base method.
func (m *MockCourier) DispatchMessage(arg0 context.Context, arg1 courier.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchMessage indicates an expected call of DispatchMessage.
func (mr *MockCourierMockRecorder) DispatchMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchMessage", reflect.TypeOf((*MockCourier)(nil).DispatchMessage), arg0, arg1)
}

// DispatchQueue mocks base method.
func (m *MockCourier) DispatchQueue(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispatchQueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DispatchQueue indicates an expected call of DispatchQueue.
func (mr *MockCourierMockRecorder) DispatchQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchQueue", reflect.TypeOf((*MockCourier)(nil).DispatchQueue), arg0)
}

// QueueEmail mocks base method.
func (m *MockCourier) QueueEmail(arg0 context.Context, arg1 courier.EmailTemplate) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueEmail", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueEmail indicates an expected call of QueueEmail.
func (mr *MockCourierMockRecorder) QueueEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueEmail", reflect.TypeOf((*MockCourier)(nil).QueueEmail), arg0, arg1)
}

// QueueSMS mocks base method.
func (m *MockCourier) QueueSMS(arg0 context.Context, arg1 courier.SMSTemplate) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSMS", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSMS indicates an expected call of QueueSMS.
func (mr *MockCourierMockRecorder) QueueSMS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSMS", reflect.TypeOf((*MockCourier)(nil).QueueSMS), arg0, arg1)
}

// SmtpDialer mocks base method.
func (m *MockCourier) SmtpDialer() *mail.Dialer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmtpDialer")
	ret0, _ := ret[0].(*mail.Dialer)
	return ret0
}

// SmtpDialer indicates an expected call of SmtpDialer.
func (mr *MockCourierMockRecorder) SmtpDialer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmtpDialer", reflect.TypeOf((*MockCourier)(nil).SmtpDialer))
}

// Work mocks base method.
func (m *MockCourier) Work(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Work", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Work indicates an expected call of Work.
func (mr *MockCourierMockRecorder) Work(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Work", reflect.TypeOf((*MockCourier)(nil).Work), arg0)
}
