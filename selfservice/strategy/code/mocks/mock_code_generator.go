// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ory/kratos/selfservice/strategy/code (interfaces: RandomCodeGenerator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomCodeGenerator is a mock of RandomCodeGenerator interface.
type MockRandomCodeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomCodeGeneratorMockRecorder
}

// MockRandomCodeGeneratorMockRecorder is the mock recorder for MockRandomCodeGenerator.
type MockRandomCodeGeneratorMockRecorder struct {
	mock *MockRandomCodeGenerator
}

// NewMockRandomCodeGenerator creates a new mock instance.
func NewMockRandomCodeGenerator(ctrl *gomock.Controller) *MockRandomCodeGenerator {
	mock := &MockRandomCodeGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomCodeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomCodeGenerator) EXPECT() *MockRandomCodeGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockRandomCodeGenerator) Generate(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockRandomCodeGeneratorMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockRandomCodeGenerator)(nil).Generate), arg0)
}
